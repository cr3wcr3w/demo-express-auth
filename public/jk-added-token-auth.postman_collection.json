{
	"info": {
		"_postman_id": "b9864411-1ce2-4fce-bd3a-369b0228e22e",
		"name": "jk/added-token-auth",
		"description": "Hellooooo\n\n# Setup instructions\n\n## Run a PostgreSQL Database Locally or in the Cloud\n\nEnvironment setup\n\n1. Create an `.env` file and copy the required variables from `sample.env`.\n    \n2. If you already have a PostgreSQL database, simply provide the URL in the `.env` file.\n    \n3. If you don't have a database, use Docker:\n    \n\n``` bash\ndocker compose up  # Start the database\n# To stop it\ndocker compose down \n\n ```\n\n## Setup Drizzle ORM\n\n``` bash\nnpm run db:generate  # Generate database schema\nnpm run db:migrate   # Apply migrations\n# If you want to view the database dashboard, run:\nnpm run db:studio\n\n ```\n\n## Run the Backend Server\n\n``` bash\nnpm run dev\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42782865"
	},
	"item": [
		{
			"name": "Sign-in",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/signin",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sample@sample.com\",\n    \"password\": \"Sample!kdew\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:6000/api/auth/signin"
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**POST** `/api/auth/signin`\n\n## üîπ Scopes\n\nNone (Public endpoint for user authentication)\n\n## üîπ Body Parameters\n\n| **Parameter** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- |\n| `email` | `string` | ‚úÖ Yes | The email address of the user |\n| `password` | `string` | ‚úÖ Yes | The user's password |\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `200 OK` | `{ \"message\": \"User signin successfully\", \"accessToken\": \"\" }` | User successfully logged in |\n| `400 Bad Request` | `{ \"message\": \"Invalid input\" }` | Email or password is missing/invalid |\n| `401 Unauthorized` | `{ \"message\": \"Invalid input\" }` | Incorrect email or password |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected error |\n\n---\n\n## üîπ Notes\n\n- **Session & Token Rules:**\n    \n    - ‚úÖ **Access Token (JWT):** Expires in **5 minutes**\n        \n    - ‚úÖ **Refresh Token:** Stored as a **HTTP-only cookie**, expires in **1 week**\n        \n    - ‚úÖ **Session Expiration:** `notAfter = 1 month`\n        \n    - ‚úÖ **Token Rotation:**\n        \n        - On login, if an active session exists, reuse it.\n            \n        - Otherwise, create a new session and issue new tokens\n            \n\n---"
		},
		{
			"name": "Sign-up",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/signup",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sample@sample.com\",\n    \"password\": \"Sample!kdew\",\n    \"firstName\": \"fname\", \n    \"lastName\": \"lname\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:6000/api/auth/signup"
					},
					"response": []
				},
				{
					"name": "http://localhost:6000/api/auth/signup Copy",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@user.com\",\n    \"password\": \"User!kdew\",\n    \"firstName\": \"fname\", \n    \"lastName\": \"lname\",\n    \"invitationToken\": \"e9325543df4d79d79a4b0be6ce55bbe2b3e61c9967e765269d2c7d87a41460e7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:6000/api/auth/signup"
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**POST** `/api/auth/signup`\n\n## üîπ Scopes\n\nNone (Public endpoint for user registration)\n\n## üîπ Body Parameters\n\n| **Parameter** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- |\n| `email` | `string` | ‚úÖ Yes | The email address of the user |\n| `password` | `string` | ‚úÖ Yes | The user's password (must meet complexity requirements) |\n| `firstName` | `string` | ‚úÖ Yes | The user's first name |\n| `lastName` | `string` | ‚úÖ Yes | The user's last name |\n| `invitationToken` | `string` | ‚ùå No | The optional one-time invitation token for role assignment |\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `201 Created` | `{ \"message\": \"User created successfully\" }` | The user was successfully registered |\n| `400 Bad Request` | `{ \"message\": \"Invalid input\" }` | One or more fields are missing or invalid |\n| `400 Bad Request` | `{ \"message\": \"Invalid or expired invitation token.\" }` | The provided invitation token is not valid or has expired |\n| `400 Bad Request` | `{ \"message\": \"This token has already been used.\" }` | The invitation token has already been redeemed |\n| `409 Conflict` | `{ \"message\": \"An account with this email already exists\" }` | The email is already registered |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected server issue |\n\n---\n\n## üîπ Notes\n\n- **Invitation Token Rules:**\n    \n    - If no token is provided, the default role is `\"guest\"`."
		},
		{
			"name": "Sign-out",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/signout",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": "http://localhost:6000/api/auth/signout"
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**POST** `/api/auth/signout`\n\n## üîπ Scopes\n\nnone\n\n## üîπ Body Parameters\n\n_None_ (Uses `refreshToken` from cookies)\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `200 OK` | `{ \"message\": \"Signed out\" }` | User successfully signed out, refresh token revoked |\n| `401 Unauthorized` | `{ \"message\": \"Unauthorized\" }` | No refresh token provided in cookies |\n| `401 Unauthorized` | `{ \"message\": \"Invalid token\" }` | The provided refresh token is invalid |\n| `404 Not Found` | `{ \"message\": \"Token not found\" }` | No matching refresh token found for the provided token |\n| `404 Not Found` | `{ \"message\": \"No tokens found for this session\" }` | No active refresh tokens were found for this session |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected error during sign-out process |\n\n---\n\n## üîπ Notes\n\n- **Sign-out Behavior:**\n    \n    - ‚úÖ If **`notAfter`** **(session expiration)** is in the past, **all refresh tokens** for that session are revoked.\n        \n    - ‚úÖ If `notAfter` is still valid, **only the provided refresh token** is revoked.\n        \n- **Security Measures:**\n    \n    - ‚úÖ Tokens are stored as **HTTP-only cookies** for security.\n        \n    - ‚úÖ Prevents unauthorized access by checking `refreshToken` validity before revoking.\n        \n    - ‚úÖ Clears the `refreshToken` cookie upon successful sign-out.\n        \n- **Multi-Device Logout:**\n    \n    - ‚úÖ If session is expired (`notAfter < NOW()`), signing out on **one device** logs out **all devices** under that session.\n        \n    - ‚úÖ Otherwise, only the **current device** is logged out."
		},
		{
			"name": "profile",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/profile",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbXBsZUBzYW1wbGUuY29tIiwiZmlyc3ROYW1lIjoiZm5hbWUiLCJsYXN0TmFtZSI6ImxuYW1lIiwicm9sZSI6Imd1ZXN0IiwicGVybWlzc2lvbiI6WyJyZWFkOnByb2ZpbGUiXSwiaWF0IjoxNzQxODA0Njk3LCJleHAiOjE3NDE4MDQ5OTd9.i8lt389uXCXvqSp6pNdorS8BSw7tf5e3WBMoUHWfwRE",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:6000/api/auth/profile?",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6000",
							"path": [
								"api",
								"auth",
								"profile"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**GET** `/api/auth/profile`\n\n## üîπ Scopes\n\n`read:profile`\n\n## üîπ Body Parameters\n\n_None_ (Uses `Authorization: Bearer` in headers and `refreshToken` from cookies)\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `200 OK` | `{ \"email\": \"...\", \"firstName\": \"...\", \"lastName\": \"...\" }` | Returns the user profile data |\n| `401 Unauthorized` | `{ \"message\": \"Unauthorized: Invalid token\" }` | The `accessToken` is invalid or expired |\n| `401 Unauthorized` | `{ \"message\": \"Unauthorized\" }` | The `refreshToken` is invalid or missing in cookies |\n| `403 Forbidden` | `{ \"message\": \"Forbidden: Insufficient permissions\" }` | The user does not have `read:profile` permission |\n| `404 Not Found` | `{ \"message\": \"User not found\" }` | The user does not exist in the database |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected error during profile retrieval |\n\n---\n\n## üîπ Notes\n\n- **Authentication & Authorization:**\n    \n    - ‚úÖ Requires a valid **JWT** **`accessToken`** in the `Authorization` header.\n        \n    - ‚úÖ Requires a valid **`refreshToken`** stored in cookies.\n        \n    - ‚úÖ Requires the **`read:profile`** permission.\n        \n- **Session Handling:**\n    \n    - ‚úÖ If the session‚Äôs `notAfter` is **today**, it is extended by **+1 day**.\n        \n    - ‚úÖ If the session is **expired**, the request will fail with `401 Unauthorized`.\n        \n    - ‚úÖ The refresh token must still be valid to retrieve the profile.\n        \n- **Security Measures:**\n    \n    - ‚úÖ Tokens are stored as **HTTP-only cookies** for security.\n        \n\n#### ‚úÖ **Handling for** **`401 Unauthorized`**\n\n- If the frontend **receives** **`401 Unauthorized`** **from other APIs**, it should call **this API (****`GET /api/auth/profile`****)** to:\n    \n    - **Verify session validity.**\n        \n    - **Check both** **`accessToken`** **and** **`refreshToken`** **status.**\n        \n- If **3 consecutive failed attempts**, force **logout and redirect the user to the login page**."
		},
		{
			"name": "Renew-access-token",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/renew-access-token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": "http://localhost:6000/api/auth/renew-access-token"
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**POST** `/api/auth/renew-access-token`\n\n## üîπ Scopes\n\n`None`\n\nüîπ Body Parameters\n\n_None_ (Uses `refreshToken` from cookies)\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `200 OK` | `{ \"message\": \"Access token generated successfully\", \"accessToken\": \"...\" }` | Returns a new access token |\n| `401 Unauthorized` | `{ \"message\": \"Unauthorized\" }` | The `refreshToken` is invalid, expired, revoked, or missing in cookies |\n| `401 Unauthorized` | `{ \"message\": \"Session expired, please log in again\" }` | The session has expired and the user must log in again |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected error during token renewal |\n\n---\n\n## üîπ Notes\n\n- **Authentication & Authorization:**\n    \n    - ‚úÖ Requires a valid **`refreshToken`** stored in cookies.\n        \n    - ‚úÖ If the refresh token is **revoked**, the user is logged out.\n        \n    - ‚úÖ If the session is **expired**, the request will fail with `401 Unauthorized`.\n        \n    - ‚úÖ The new `accessToken` will be valid for **5 minutes**.\n        \n    - ‚úÖ The new `refreshToken` will be valid for **7 days** and replaces the old one.\n        \n- **Security Measures:**\n    \n    - ‚úÖ **Refresh Token Rotation**: Old refresh token is revoked when a new one is issued.\n        \n    - ‚úÖ **HTTP-only Cookies**: The refresh token is stored securely in cookies.\n        \n    - ‚úÖ **Permissions Check**: The API ensures the user still has valid permissions before issuing a new token.\n        \n    - ‚úÖ **Session Handling**: Ensures the session associated with the refresh token is still active."
		},
		{
			"name": "invite-generate-email",
			"item": [
				{
					"name": "http://localhost:6000/api/auth/invite",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbXBsZUBzYW1wbGUuY29tIiwiZmlyc3ROYW1lIjoiZm5hbWUiLCJsYXN0TmFtZSI6ImxuYW1lIiwicm9sZSI6ImFkbWluIiwicGVybWlzc2lvbiI6WyJjcmVhdGU6aW52aXRhdGlvbiIsInJlYWQ6cHJvZmlsZSJdLCJpYXQiOjE3NDE4MDA0NDksImV4cCI6MTc0MTgwMDc0OX0.DVP_mP0sxw6fQRYCXNOJh-CtWdwDnQFKcFX_GtxcL7Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleId\": \"f7129912-48e8-4f03-8705-07907da83e26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:6000/api/auth/generate-invitation"
					},
					"response": []
				}
			],
			"description": "## üîπ Endpoint\n\n**POST** `/api/auth/generate-invitation`\n\n## üîπ Scopes\n\n`create:invitation`\n\n## üîπ Body Parameters\n\n| **Parameter** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- |\n| `roleId` | `string` | ‚úÖ Yes | The role ID assigned to the invited user |\n\n---\n\n## üîπ Response Messages\n\n| **Status Code** | **Message** | **Description** |\n| --- | --- | --- |\n| `201 Created` | `{ \"message\": \"One-time token created.\", \"token\": \"...\" }` | Successfully generates a one-time invitation token |\n| `400 Bad Request` | `{ \"message\": \"Invalid input\" }` | Request body is missing `roleId` or has incorrect format |\n| `401 Unauthorized` | `{ \"message\": \"Unauthorized\" }` | The request lacks valid authentication credentials |\n| `403 Forbidden` | `{ \"message\": \"Forbidden: Insufficient permissions\" }` | The user does not have `\"create:invitation\"` permission |\n| `500 Internal Server Error` | `{ \"message\": \"Internal server error\" }` | Unexpected error during token generation |\n\n---\n\n## üîπ Notes\n\n- **Authentication & Authorization:**\n    \n    - ‚úÖ Requires a valid `accessToken` with `\"create:invitation\"` permission.\n        \n    - ‚úÖ If the user does not have this permission, they receive a `403 Forbidden` response.\n        \n    - permission with `create:invitation`\n        \n- **Invitation Token Details:**\n    \n    - ‚úÖ The generated **one-time token** is stored securely in the database (`one_time_tokens`).\n        \n    - ‚úÖ **Token Expiration:** The token expires **after 1 week** (`notAfter = NOW() + INTERVAL '1 week'`).\n        \n    - ‚úÖ **Token Security:**\n        \n        - The raw token is **hashed** before storing it.\n            \n- **Use Case:**\n    \n    - The generated token is used in the **signup process** to assign a specific `roleId` to the invited user."
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbXBsZUBzYW1wbGUuY29tIiwiZmlyc3ROYW1lIjoiZm5hbWUiLCJsYXN0TmFtZSI6ImxuYW1lIiwicm9sZSI6Imd1ZXN0IiwicGVybWlzc2lvbiI6WyJyZWFkOnVzZXJzIl0sImlhdCI6MTc0MTUyNTE4MywiZXhwIjoxNzQxNTI1NDgzfQ.jO8BT1w-Gk9xChShueoe3_ufm_FEi-S_Hmfe_jfrz-0",
			"type": "default"
		}
	]
}